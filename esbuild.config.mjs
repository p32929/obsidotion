import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";

const banner =
`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = (process.argv[2] === "production");

// Deployment plugin
const deployPlugin = {
	name: 'deploy-to-obsidian',
	setup(build) {
		build.onEnd(async (result) => {
			if (result.errors.length === 0) {
				try {
					// Dynamic import the deployment module
					const { deployToVault } = await import('./deploy.config.js');
					deployToVault();
				} catch (error) {
					console.log('⚠️  Deployment skipped:', error.message);
				}
			}
		});
	},
};

const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ["src/main-new.ts"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins],
	format: "cjs",
	target: "es2018",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	outfile: "main.js",
	plugins: prod ? [] : [deployPlugin], // Only deploy in dev mode
});

if (prod) {
	await context.rebuild();
	// Deploy for production builds too
	try {
		const { deployToVault } = await import('./deploy.config.js');
		deployToVault();
	} catch (error) {
		console.log('⚠️  Production deployment skipped:', error.message);
	}
	process.exit(0);
} else {
	await context.watch();
}